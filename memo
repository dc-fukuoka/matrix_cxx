to achieve like this, simply use python + numpy!
BLAS and LAPACK are used in that, it is fast.

[fukuoka@selene71 matrix_cxx]$ ipython
Python 3.6.2 |Intel Corporation| (default, Aug 15 2017, 16:14:26)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: np.random.seed(555)

In [3]: A = np.matrix(np.random.rand(16).reshape((4,4), order='c'))

In [4]: A
Out[4]:
matrix([[ 0.71783409,  0.04785513,  0.94447198,  0.68638004],
        [ 0.58120733,  0.14267862,  0.94591918,  0.33999059],
        [ 0.62043546,  0.45295964,  0.23976742,  0.03450459],
        [ 0.14859311,  0.81086617,  0.65310538,  0.54446869]])

In [5]: np.random.seed(7777)

In [6]: B = np.matrix(np.random.rand(16).reshape((4,4), order='c'))

In [7]: B
Out[7]:
matrix([[ 0.81150513,  0.69232414,  0.45248612,  0.99662967],
        [ 0.98757038,  0.28545261,  0.51795197,  0.549447  ],
        [ 0.0550377 ,  0.01829376,  0.88514856,  0.26354891],
        [ 0.96610934,  0.6176792 ,  0.15060253,  0.25199137]])

In [8]: C = A*B

In [9]: C
Out[9]:
matrix([[ 1.34488608,  0.95187485,  1.2889652 ,  1.16358502],
        [ 0.9930872 ,  0.67042138,  1.22537137,  0.99261347],
        [ 0.99734754,  0.58453997,  0.73277604,  0.939107  ],
        [ 1.48333318,  0.68259319,  1.1473197 ,  0.90294691]])

In [10]: D = np.dot(A, B)

In [11]: D
Out[11]:
matrix([[ 1.34488608,  0.95187485,  1.2889652 ,  1.16358502],
        [ 0.9930872 ,  0.67042138,  1.22537137,  0.99261347],
        [ 0.99734754,  0.58453997,  0.73277604,  0.939107  ],
        [ 1.48333318,  0.68259319,  1.1473197 ,  0.90294691]])

In [12]: Binv = np.linalg.inv(B)

In [13]: B
Out[13]:
matrix([[ 0.81150513,  0.69232414,  0.45248612,  0.99662967],
        [ 0.98757038,  0.28545261,  0.51795197,  0.549447  ],
        [ 0.0550377 ,  0.01829376,  0.88514856,  0.26354891],
        [ 0.96610934,  0.6176792 ,  0.15060253,  0.25199137]])

In [14]: Binv
Out[14]:
matrix([[-0.72396642,  1.51122188, -0.53615265,  0.12894307],
        [ 0.70157959, -2.57831784,  0.80976412,  2.00015388],
        [-0.34532578, -0.2400298 ,  1.36890829,  0.4574414 ],
        [ 1.26229144,  0.66953409, -0.74745981, -1.70211536]])

In [15]: I = B*Binv

In [16]: I
Out[16]:
matrix([[  1.00000000e+00,   1.11022302e-16,   0.00000000e+00,
          -2.22044605e-16],
        [  0.00000000e+00,   1.00000000e+00,   0.00000000e+00,
           0.00000000e+00],
        [  0.00000000e+00,   0.00000000e+00,   1.00000000e+00,
           0.00000000e+00],
        [ -5.55111512e-17,  -1.94289029e-16,   1.94289029e-16,
           1.00000000e+00]])
